xlim(0,1) + ylim(0,1) +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2)) +
scale_x_continuous(limits = c(0,1), breaks = seq(0,1,0.2)) +
theme(text = element_text(size = 20))
# zoomed-in
b <- ggplot(data = df, aes(y = `surv2011.1624`, x = ymode)) +
geom_errorbarh(aes(xmin = ymin95, xmax = ymax95), colour = "grey") +
geom_errorbarh(aes(xmin = ymin50, xmax = ymax50), colour = "grey", size = 1.2) +
theme(legend.position = "none") + theme_bw() +
xlab("MRP estimates") + ylab("Recorded data") +
geom_point(colour = "black") +
geom_abline(intercept = 0, slope = 1, colour = "black") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
# xlim(0.1,0.7) + ylim(0,1) +
scale_y_continuous(limits = c(0.15,0.5), breaks = seq(0,1,0.2)) +
scale_x_continuous(limits = c(0.15,0.5), breaks = seq(0,1,0.2)) +
theme(text = element_text(size = 20))
### label numbers
c <- ggplot(data = df, aes(y = `surv2011.1624`, x = ymode, label = laname.num)) +
theme(legend.position = "none") + theme_bw() +
xlab("MRP estimates") + ylab("Recorded data") +
geom_abline(intercept = 0, slope = 1, colour="black") +
geom_text(size=3) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
xlim(0,1) + ylim(0,1) +
scale_y_continuous(limits=c(0,1), breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,1), breaks=seq(0,1,0.2)) +
theme(text = element_text(size=20))
# zoomed-in
d <- ggplot(data = df, aes(y = `surv2011.1624`, x = ymode, label = laname.num)) +
theme(legend.position = "none") + theme_bw() +
xlab("MRP estimates") + ylab("Recorded data") +
geom_abline(intercept = 0, slope = 1, colour="black") +
geom_text(size=3) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
# xlim(0.1,0.7) + ylim(0,1) +
scale_y_continuous(limits=c(0.15,0.5), breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0.15,0.5), breaks=seq(0,1,0.2)) +
theme(text = element_text(size=20))
grid.arrange(a, b, c, d, ncol=2)
## Recorded vs mrp
### bars
a <- ggplot(data = df, aes(y = `surv2011.1624`, x = ymode)) +
geom_errorbarh(aes(xmin = ymin95, xmax = ymax95), colour = "grey") +
geom_errorbarh(aes(xmin = ymin50, xmax = ymax50), colour = "grey", size = 1.2) +
theme(legend.position = "none") + theme_bw() +
xlab("MRP estimates") + ylab("Recorded data") +
geom_point(colour = "black") +
geom_abline(intercept = 0, slope = 1, colour = "black") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
xlim(0,1) + ylim(0,1) +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2)) +
scale_x_continuous(limits = c(0,1), breaks = seq(0,1,0.2)) +
theme(text = element_text(size = 20)) +
ggtitle('(a)')
# zoomed-in
b <- ggplot(data = df, aes(y = `surv2011.1624`, x = ymode)) +
geom_errorbarh(aes(xmin = ymin95, xmax = ymax95), colour = "grey") +
geom_errorbarh(aes(xmin = ymin50, xmax = ymax50), colour = "grey", size = 1.2) +
theme(legend.position = "none") + theme_bw() +
xlab("MRP estimates") + ylab("Recorded data") +
geom_point(colour = "black") +
geom_abline(intercept = 0, slope = 1, colour = "black") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
# xlim(0.1,0.7) + ylim(0,1) +
scale_y_continuous(limits = c(0.15,0.5), breaks = seq(0,1,0.2)) +
scale_x_continuous(limits = c(0.15,0.5), breaks = seq(0,1,0.2)) +
theme(text = element_text(size = 20)) +
ggtitle('(b)')
### label numbers
c <- ggplot(data = df, aes(y = `surv2011.1624`, x = ymode, label = laname.num)) +
theme(legend.position = "none") + theme_bw() +
xlab("MRP estimates") + ylab("Recorded data") +
geom_abline(intercept = 0, slope = 1, colour="black") +
geom_text(size=3) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
xlim(0,1) + ylim(0,1) +
scale_y_continuous(limits=c(0,1), breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,1), breaks=seq(0,1,0.2)) +
theme(text = element_text(size=20)) +
ggtitle('(c)')
# zoomed-in
d <- ggplot(data = df, aes(y = `surv2011.1624`, x = ymode, label = laname.num)) +
theme(legend.position = "none") + theme_bw() +
xlab("MRP estimates") + ylab("Recorded data") +
geom_abline(intercept = 0, slope = 1, colour="black") +
geom_text(size=3) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
# xlim(0.1,0.7) + ylim(0,1) +
scale_y_continuous(limits=c(0.15,0.5), breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0.15,0.5), breaks=seq(0,1,0.2)) +
theme(text = element_text(size=20)) +
ggtitle('(d)')
grid.arrange(a, b, c, d, ncol = 2)
rm(list = ls())
library(MASS)
library(R2WinBUGS)
library(plyr)
library(lattice)
library(mcmcplots)
library(Hmisc)
load("C:/Users/ngreen1/Dropbox/small_area_chlamydia/R_code/scripts/mrp/data/cleaned-regn-input-mrpNatsal.RData")
MIN_AGE <- 15
MAX_AGE <- 25
## Natsal-3 ##
Natsal0 <- Natsal
Natsal  <- subset(Natsal, age >= MIN_AGE & age < MAX_AGE)   #NCSP range
Natsal  <- subset(Natsal, sam1yr == 0) #opposite sex partner in last year only
Natsal$sex1yr <- (Natsal$het1yr != 0 | Natsal$sam1yr != 0) #why?
interiorcuts <- cut2(sim_prop_la$Conception.rate.per.1.000.women.in.age.group,
g = 10, onlycuts = T)
conception.under18$Conception.decile <- cut2(conception.under18$Conception.rate.per.1.000.women.in.age.group,
cuts = interiorcuts)
Natsal$`Numerical classification`[Natsal$laname == "BRISTOL, CITY OF"] <- 2
Natsal$`Numerical classification`[Natsal$laname == "CHESHIRE EAST"] <- 5
Natsal$`Numerical classification`[Natsal$laname == "HEREFORDSHIRE, COUNTY OF"] <- 5
Natsal$`Numerical classification`[Natsal$laname == "COUNTY DURHAM"] <- 5
Natsal$`Numerical classification`[Natsal$laname == "KINGSTON UPON HULL, CITY OF"] <- 2
Natsal$`Numerical classification`[Natsal$laname == "NORTHUMBERLAND"] <- 5
Natsal$`Numerical classification`[Natsal$laname == "SHROPSHIRE"] <- 5
Natsal$`Numerical classification`[Natsal$laname == "ST. ALBANS"] <- 4
Natsal$`Numerical classification`[Natsal$laname == "WILTSHIRE"] <- 5
LA_factor.name <- droplevels(as.factor(Natsal$laname))
metUA_factor.name <- droplevels(as.factor(Natsal$metcounty_UA))
ethnic2.name <- droplevels(as.factor(Natsal$ethnic2))
ONS.name <- droplevels(as.factor(Natsal$`Numerical classification`))
gor.name <- droplevels(as.factor(Natsal$gor))
conception.name <- droplevels(as.factor(Natsal$Conception.decile))
gorLondon <- Natsal$gor == 9
IMD.upperQ <- Natsal$`Average Score` > 28
IMD.upperQ[is.na(IMD.upperQ)] <- FALSE  ##TODO## fix original join (herefordshire, hull, peterborough, stoke on trent)
conception.name[is.na(conception.name)] <- "[33.0,35.8)"  # sub mid-range ##TODO## fix original join (city of london, cornwall, hackney, southend-on-sea)
LA_factor_lookup <- data.frame(`LA.Name` = levels(LA_factor.name),
`la_factor` = sort(unique(as.numeric(LA_factor.name))))
LA_factor_lookup <- merge(LA_factor_lookup, laregionlookup2013, by.x = "LA.Name", by.y = "la_name", all.x = TRUE)     #removes LAs not in sample
LA_factor_lookup <- merge(LA_factor_lookup, LAclassification.dat[,c("LA Name", "Classification", "Numerical classification")],
by.x = "LA.Name", by.y = "LA Name", all.x = TRUE)
LA_factor_lookup <- merge(LA_factor_lookup, IMD.dat2010[,c("LA Name", "Average Score")],
by.x = "LA.Name", by.y = "LA Name", all.x = TRUE)
LA_factor_lookup <- merge(LA_factor_lookup, conception.under18[,c("Name", "Conception.decile")],
by.x = "LA.Name", by.y = "Name", all.x = TRUE)
LA_factor_lookup <- within(LA_factor_lookup,
london <- as.numeric(gor == 9))
LA_factor_lookup$IMD.upperQ <- LA_factor_lookup$"Average Score" > 28
LA_factor_lookup$metcounty_UA.factor <- as.numeric(LA_factor_lookup$metcounty_UA)
LA_factor_lookup$metcounty_UA <- toupper(LA_factor_lookup$metcounty_UA) #move to prep file...
LA_factor_lookup$"Numerical classification" <- droplevels(as.factor(LA_factor_lookup$"Numerical classification"))
LA_factor_lookup$metcounty_UA <- droplevels(as.factor(LA_factor_lookup$metcounty_UA))
LA_factor_lookup$gor <- droplevels(as.factor(LA_factor_lookup$gor))
LA_factor_lookup$Conception.decile <- droplevels(as.factor(LA_factor_lookup$Conception.decile))
LA_factor_lookup$london <- droplevels(as.factor(LA_factor_lookup$london))
## match factor levels in Natsal and lookup
LA_factor.name <- factor(LA_factor.name, levels = levels(LA_factor_lookup$LA.Name))
metUA_factor.name <- factor(metUA_factor.name, levels = levels(LA_factor_lookup$metcounty_UA))
ONS.name <- factor(ONS.name, levels = levels(LA_factor_lookup$`Numerical classification`))
conception.name <- factor(conception.name, levels = levels(LA_factor_lookup$Conception.decile))
WinBUGSdata <- data.frame(cttestly = Natsal$cttestly,
student = as.numeric(Natsal$student),
male = as.numeric(Natsal$rsex) - 1, #1-male, 0-female
dage = Natsal$dage,
age = Natsal$dage - min(Natsal$dage) + 1,
ethngrp = as.numeric(ethnic2.name),
IMD.upperQ = as.numeric(IMD.upperQ),
gor = as.numeric(gor.name),
metcounty_UA = as.numeric(metUA_factor.name),
gorLondon = as.numeric(gorLondon),
ONSclass = as.numeric(ONS.name),
la_factor = as.numeric(LA_factor.name),
smokenow = as.numeric(Natsal$smokenow),
conception = as.numeric(conception.name),
hhsize1 = as.numeric(Natsal$hhsize == 1)
)
Nage <- length(table(WinBUGSdata$age))
Nla <- length(table(WinBUGSdata$la_factor))
Nethgrp <- length(table(WinBUGSdata$ethngrp))
NONSclass <- length(table(WinBUGSdata$ONSclass))
Nconception <- length(table(WinBUGSdata$conception))
Nmetcounty_UA <- length(table(WinBUGSdata$metcounty_UA))
Ngor <- length(table(WinBUGSdata$gor))
# setwd("C:/Users/ngreen1/Dropbox/small-area & chlamydia/R_code/scripts")
setwd("../../temp_WinBUGS_output")
sink("model.txt")
cat("
model
{
# Hyperpriors
tau.age ~ dgamma(0.001, 0.001)
tau.ethngrp ~ dgamma(0.001, 0.001)
tau.la ~ dgamma(0.01, 0.01)
tau.ons ~ dgamma(0.001, 0.001)
tau.met ~ dgamma(0.01, 0.01)
tau.conception ~ dgamma(0.01, 0.01)
tau.gor ~ dgamma(0.001, 0.001)
#tau.b ~ dgamma(0.001, 0.001)
# Priors
alpha ~ dunif(-2,1)
b.male ~ dunif(-2,1)
b.IMD ~ dunif(-2,1)
b.student ~ dunif(-2,1)
b.hhsize1 ~ dunif(-2,1)
#b.london ~ dunif(-2,2)
# Likelihood
for(i in 1:n) {
#b[i] ~ dnorm(0, tau.b)
cttestly[i] ~ dbin(p[i], N)
logit(p[i]) <- alpha + b.male*male[i] +
b.student*student[i] +
b.hhsize1*hhsize1[i] +
b.IMD*IMD.upperQ[i] +
v[age[i]] +
w[ethgrp[i]] +
r[la.factor[i]] +
g[metcounty.UA[i]] +
h[gor[i]] +
u[ONSclass[i]] +
d[conception[i]]
#b.london*LAlondon[la.factor[i]] #+ b[i]
cttestly.rep[i] ~ dbin(p[i], N)
}
# age
for(k in 1:K) {
v[k] ~ dnorm(0, tau.age)
}
# ethnic group
for(l in 1:L) {
w[l] ~ dnorm(0, tau.ethngrp)
}
# LA
for(s in 1:S) {
r[s] ~ dnorm(0, tau.la)
}
# met county
for(m in 1:M) {
g[m] ~ dnorm(0, tau.met)
}
# Region
for(q in 1:Q) {
h[q] ~ dnorm(0, tau.gor)
}
# ONS urban-rural classification
for(j in 1:J) {
u[j] ~ dnorm(0, tau.ons)
}
# <=18 years old conception rate
for(e in 1:E) {
d[e] ~ dnorm(0, tau.conception)
}
# odds-ratios
# or.male = exp(b.male)
# or.student = exp(b.student)
}
", fill = TRUE)
sink()
win.data <- list(male = WinBUGSdata$male,
age = WinBUGSdata$age,
ethgrp = WinBUGSdata$ethngrp,
student = WinBUGSdata$student,
hhsize1 = WinBUGSdata$hhsize1,
ONSclass = WinBUGSdata$ONSclass,
la.factor = WinBUGSdata$la_factor,
metcounty.UA = WinBUGSdata$metcounty_UA,
gor = WinBUGSdata$gor,
conception = WinBUGSdata$conception,
IMD.upperQ = WinBUGSdata$IMD.upperQ,
cttestly = WinBUGSdata$cttestly,
n = nrow(WinBUGSdata),
K = Nage,
L = Nethgrp,
J = NONSclass,
E = Nconception,
S = Nla,
M = Nmetcounty_UA,
Q = Ngor,
N = 1)
# inits <- function(){ list(alpha=rlnorm(1), b.age=rlnorm(1), b.male=rlnorm(1))}
inits <- list(
list(alpha = -1, b.male = -1,
b.student = 0, b.IMD = 0,
b.hhsize1 = 0,
tau.age = 0.1, tau.ethngrp = 2,
tau.ons = 0.4,
tau.conception = 0.1,
tau.gor = 0.1,
tau.la = 1,
tau.met = 0.1
), #, b.london=0, tau.b=1),
list(alpha = -1, b.male = -1,
b.student = 0, b.IMD = 0,
b.hhsize1 = 0,
tau.age = 0.1, tau.ethngrp = 3,
tau.ons = 0.1,
tau.conception = 0.2,
tau.gor = 0.1,
tau.la = 2,
tau.met = 0.2
), #, b.london=0, tau.b=1),
list(alpha = -1, b.male = -1,
b.student = 0, b.IMD = 0,
b.hhsize1 = 0,
tau.age = 0.5, tau.ethngrp = 1,
tau.ons = 0.2,
tau.conception = 0.3,
tau.gor = 0.1,
tau.la = 3,
tau.met = 0.3
) #, b.london=0, tau.b=1)
)
# Parameters to estimate
params <- c("alpha",
"b.male",
"b.student",
"b.IMD",
"b.hhsize1",
"tau.age",
"tau.ethngrp",
"tau.ons",
"tau.conception",
"tau.gor",
"tau.la",
"tau.met",
"v",
"w",
"r",
"u",
"d",
"g",
"h",
"cttestly.rep"
)#, "b.london", "tau.b"
# MCMC settings
nc <- 3 #Number of Chains
ni <- 1000 #Number of draws from posterior
nb <- 10 #Number of draws to discard as burn-in
nt <- 2 #Thinning rate
bugsDir <- 'C:/Program Files (x86)/WinBUGS14'
# outmcmc <- read.bugs(c(coda1.file, coda2.file, coda3.file))
outmcmc <- read.bugs(c("coda1.txt", "coda2.txt", "coda3.txt"))
getwd()
setwd("C:/Users/ngreen1/Dropbox/small_area_chlamydia/R_code/scripts/WinBUGS/WinBUGS_MAIN/WinBUGS_MAIN-all_LA-vars")
# outmcmc <- read.bugs(c(coda1.file, coda2.file, coda3.file))
outmcmc <- read.bugs(c("coda1.txt", "coda2.txt", "coda3.txt"))
outmat <- plyr::ldply(outmcmc, data.frame)
## replace parameter names with proper labels
## read.bugs
names(outmat)[grepl("w\\.[1234567890]+", names(outmat))] <- ethngrp.names
ethngrp.names <- sapply(levels(ethnic2.name), simpleCap)  #w  #levels(Natsal$ethnic2)[sort(unique(as.numeric(Natsal$ethnic2)))]
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), tolower(substring(s, 2)),
sep = "", collapse = " ")
}
ethngrp.names <- sapply(levels(ethnic2.name), simpleCap)  #w  #levels(Natsal$ethnic2)[sort(unique(as.numeric(Natsal$ethnic2)))]
age.names <- as.character(sort(unique(WinBUGSdata$dage))) #v
gor.names <- as.character(levels(gor.name))  #h
la.names <- sapply(as.character(levels(LA_factor.name)), simpleCap)  #r
metUA.names <- sapply(as.character(levels(metUA_factor.name)), simpleCap)  #g
UrbRur.names <- as.character(levels(ONS.name))  #u
conception.names <- as.character(levels(conception.name))  #d
## recover the original factor values from the level numbers
## if not directly available
gor.names <- as.character(unique(merge(data.frame(gor.names), LA_factor_lookup[,c("gor","region_name")],
by.x = "gor.names", by.y = "gor", all.x = T, all = F, sort = F))$region_name)
gor.names <- sapply(gor.names, simpleCap)
UrbRur.names <- as.character(unique(merge(data.frame(UrbRur.names), LA_factor_lookup[,c("Classification","Numerical classification")],
by.x = "UrbRur.names", by.y = "Numerical classification", all.x = T, all = F, sort = F))$Classification)
## replace parameter names with proper labels
## read.bugs
names(outmat)[grepl("w\\.[1234567890]+", names(outmat))] <- ethngrp.names
names(outmat)[grepl("v\\.[1234567890]+", names(outmat))] <- age.names
names(outmat)[grepl("r\\.[1234567890]+", names(outmat))] <- la.names
names(outmat)[grepl("g\\.[1234567890]+", names(outmat))] <- metUA.names
names(outmat)[grepl("h\\.[1234567890]+", names(outmat))] <- gor.names
names(outmat)[grepl("u\\.[1234567890]+", names(outmat))] <- UrbRur.names
names(outmat)[grepl("d\\.[1234567890]+", names(outmat))] <- conception.names
gmod  <- ggmcmc::ggs(outmcmc)
par(mar = c(5,17,4,2))
caterplot(outmcmc, lwd = c(1,4), style = "plain", col = "black", pch = 19, reorder = FALSE, axes = FALSE, cex.labels = 1.2,
parms = c("b.male", "w", "b.male",
"b.male", "d", "b.male",
"b.male", "u", "b.male",
"b.male", "h", "b.male",
"b.IMD", "b.male", "b.student", "b.hhsize1"),
labels = c("Ethnic group                        ", ethngrp.names, "",
"Conception deciles             ", conception.names, "",
"ONS urban-rural categories", UrbRur.names, "",
"Region                                 ", gor.names, "",
"IMD upper quintile", "Male", "Student", "Live alone"))
axis(1); axis(3)
abline(v = 0, lty = 2, col = "red")
## LAs only
par(mar=c(5,5,4,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"))
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## metUA only
par(mar=c(5,5,4,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("g"))
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## LAs only
par(mfrow = c(1,2))
par(mar = c(5,5,4,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"), main = "(a)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"), title = "(a)")
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"), main = "(a)")
title(main = "(a)")
## LAs only
par(mfrow = c(1,2))
par(mar = c(5,5,4,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"))
title(main = "(a)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## metUA only
par(mar=c(5,5,4,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("g"))
title(main = "(b)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
par(mar = c(5,5,4,3))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"))
## LAs only
par(mfrow = c(1,2))
par(mar = c(5,5,4,3))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"))
title(main = "(a)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## metUA only
par(mar=c(5,5,4,3))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("g"))
title(main = "(b)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## LAs only
par(mfrow = c(1,2))
par(mar = c(5,5,7,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"))
title(main = "(a)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## metUA only
par(mar=c(5,5,7,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("g"))
title(main = "(b)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## LAs only
par(mfrow = c(1,2))
par(mar = c(5,5,5,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"))
title(main = "(a)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## metUA only
par(mar=c(5,5,5,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("g"))
title(main = "(b)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## LAs only
par(mfrow = c(1,2))
par(mar = c(5,5,6,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("r"))
title(main = "(a)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
## metUA only
par(mar=c(5,5,6,2))
caterplot(outmcmc, lwd=c(1,2), style = "plain", col="black", pch=19, reorder=TRUE, axes=F, labels = NA,
parms = c("g"))
title(main = "(b)")
axis(1); axis(3)
abline(v=0, lty=2, col="red")
